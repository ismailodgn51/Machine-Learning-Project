# -*- coding: utf-8 -*-
"""Untitled

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BgvHKt2boe1DhD_BQV8CsU8Y1ZmSFmd1
"""

from google.colab import drive
drive.mount('/content/gdrive')

# Commented out IPython magic to ensure Python compatibility.
# %cd gdrive/MyDrive/Colab Notebooks/

import tensorflow as tf
tf.test.gpu_device_name()

from tensorflow.python.client import device_lib
device_lib.list_local_devices()

from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Conv2D,MaxPooling2D
from keras.layers import Activation, Dropout, Flatten, Dense
from keras import backend as K
#giriş olarak verilecek goruntulerin boyutları 

img_Width, img_height = 224, 224

train_data_yolu = 'Data/Train'
test_data_yolu = 'Data/Test'
train_ornek_sayisi = 4000
test_ornek_sayisi = 2000
#4032
#2038
epochs = 20
batch_size =1     #her seferinde eğitim için alıncak veri sayisi
#train_ornek_sayisi, validation_ornek_sayisi ile batc_size tam bolunmeli

if K.image_data_format() == 'channels_first':
  input_shape = (3,img_Width, img_height)
else:
  input_shape = (img_Width, img_height, 3)

#model olusturalim
model = Sequential()
#Giris katmani ve Conv1
model.add(Conv2D(32,(3,3),input_shape=input_shape))#32 filtre sayisi ,3x3 konvulsiyon boyutu
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))#2x2 lik maxpool uygulanıyor yani resim sayisi yariya indiriliyor
#Conv2
model.add(Conv2D(32,(5,5)))
model.add(Conv2D(32,(3,3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
#eklenen 1
model.add(Conv2D(32,(3,3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
#Conv3
model.add(Conv2D(64,(3,3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
#Flatten Duzleştirme
model.add(Flatten())
#FC (fully connected layer oluşturuluyor)
model.add(Dense(64))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(4))
#sinif sayisi
#binary siniflama için : model.add(Dense(1))
model.add(Activation('sigmoid'))

#model Derleme
model.compile(loss='binary_crossentropy',optimizer='rmsprop',metrics=['accuracy'])

#train işlemi için kullanılan veriler çoğaltılıyor
train_datalar=ImageDataGenerator(
    rescale=1. /255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True)

#test işlemi için goruntuler rexcale boyutlandırma yapılıyor
test_datalar =ImageDataGenerator(rescale=1. /255)

train_generator=train_datalar.flow_from_directory(
    train_data_yolu,
    target_size=(img_Width,img_height),
    batch_size=batch_size,
    class_mode='categorical')
#binary classification (ikili sınıflandırma): class_mode='binary'
#multiclass  (coklu sinif): class_mode:'categorical'

validation_generator = test_datalar.flow_from_directory(
    test_data_yolu,
    target_size=(img_Width,img_height),
    batch_size=batch_size,
    class_mode='categorical')

#modelin eğitimi

model.fit_generator(
    train_generator,
    steps_per_epoch=train_ornek_sayisi // batch_size,
     epochs=epochs,
     validation_data = validation_generator,
     validation_steps = (test_ornek_sayisi // batch_size))

#modele weightler rastsal oldugu icin basarili sonuclari korumak için model kaydeder
model.save_weights('ISMAIL_BASARILIMODEL.h5')

from keras.preprocessing.image import load_img
from keras.preprocessing.image import img_to_array
import numpy as np

model.load_weights('BASARILIMODEL1.h5')

img = load_img('download.jpg', grayscale=False, color_mode='rgb',target_size=(img_Width, img_height))

#img = load_img('bh.jpg',False, (img_Width, img_height))
x = img_to_array(img)   # Numpy kutuphanesi ile bir diziye donusturuldu: shape (3, 224, 224)
prediction = model.predict(x.reshape((1,img_Width, img_height,3)),batch_size=32,verbose=0) #(1, 224, 224, 3)
print(prediction)